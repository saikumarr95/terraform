# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

steps:

- task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
  displayName: "Install Terraform"
  inputs:
    terraformVersion: "latest"

- task: TerraformCLI@1
  inputs:
    command: 'init'
    backendType: 'azurerm'
    backendServiceArm: 'azspn-cpu-cis-fabric-corp-prod-001'
    environmentServiceName: 'azspn-cpu-cis-fabric-corp-prod-001'
    backendAzureRmSubscriptionId: '23901823-e0ae-47b1-b16e-f3897302cca3'
    providerAzureRmSubscriptionId: '6bae2ad5-f444-4054-bc59-73e900e89019'
    backendAzureRmResourceGroupName: 'rg-mhub-tfstate-uks'
    backendAzureRmStorageAccountName: 'stmhubtfstateuks '
    backendAzureRmContainerName: 'cpu-cis-fabric-corp-prod-001'
    backendAzureRmKey: 'terraformpipeline.tfstate'
    allowTelemetryCollection: true

- task: TerraformCLI@1
  inputs:
    command: 'validate'
    environmentServiceName: 'azspn-cpu-cis-fabric-corp-prod-001'
    providerAzureRmSubscriptionId: '6bae2ad5-f444-4054-bc59-73e900e89019'
    allowTelemetryCollection: true

- task: TerraformCLI@1
  inputs:
    command: 'plan'
    environmentServiceName: 'azspn-cpu-cis-fabric-corp-prod-001'
    providerAzureRmSubscriptionId: '6bae2ad5-f444-4054-bc59-73e900e89019'
    commandOptions: '-input=false'
    allowTelemetryCollection: true

- task: TerraformCLI@1
  inputs:
    command: 'apply'
    environmentServiceName: 'azspn-cpu-cis-fabric-corp-prod-001'
    providerAzureRmSubscriptionId: '6bae2ad5-f444-4054-bc59-73e900e89019'
    commandOptions: '-input=false'
    allowTelemetryCollection: true